<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Linq.Expressions;
using System.Reactive.Linq;

namespace MiniReactiveMvvm
{
    public static class ObservableMvvmChanged
    {
<#
    foreach (var i in Enumerable.Range(2, 15))
    {
        var range = Enumerable.Range(1, i);
        var genericArguments = string.Join(", ", range.Select(j => $"TProperty{j}"));
        var nl = Environment.NewLine;
        var propertyExpressionArguments = string.Join(
            $"{nl}            ",
            range.Select(j => $"Expression<Func<TObj, TProperty{j}>> propertyExpr{j},"));
        var combineArguments = string.Join(
            $"{nl}                ",
            range.Select(j => $"viewModel.Changed(propertyExpr{j}),")
        );
#>
        public static IObservable<TResult> Changed<TObj, <#= genericArguments #>, TResult>(
            this TObj viewModel,
            <#= propertyExpressionArguments #>
            Func<<#= genericArguments #>, TResult> combine)
        {
            return Observable.CombineLatest(
                <#= combineArguments #>
                combine);
        }
<#
        };
#>
    }
}